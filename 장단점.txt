
React란?
UI(User Interface)를 효과적으로 구축하기 위해 사용하는 자바스크립트 기반 라이브러이다
다른 라이브러리와 함께 사용할수 있어서 효율적이다



React의 특징

1.선언적 이다 


리액트는 대화형 UI(User Interface)를 작성하기에 유리하다. 데이터가 변경되었을 떄 효율적으로 랜더링을 수행할 수 있도록 한다.

2.컴포넌트 기반이다

캡술화된 컴포넌트가 스스로 상태를 관리하고 복잡한 UI도 효과적으로 구성할 수 있음

3.한 번 배워서 어디에서나 사용하기..

기존 소스를 불필요하게 다시 작성하지 않고 새 기능을 개발 할 수 있다.
Node 서버에서 랜더링을 할 수도 있고,온라인 웹에서도 사용 가능하다.


장점

1.복잡한 사용자 인터페이스를 쉽게 구축하기위해 개발한 라이브러리다
2.길고 복잡한 코드들을 쪼개서 하나씩 조립하면서 페이지를 만들기 떄문에 모든 배너를 수정할 수 있다.
3.모듈화를 하면서 한꺼번에 수정이가능하다--재사용 가능
4.가상돔을 만들어서 내가(개발자가) 원하는 순간에 화면을 그릴수있다 (virtual dom을 통해서)
5.리랜더 속도는 빠르다  
6. 원하는 순간에 특정한 함수를 다시 실행할 수 있다.
7.유지보수가 좋다
8.로직을 분리하는 것이 아닌 하나로 관리할 수 있다
9.선능이 뛰어난 가비지 컬랙터 와 메모리 관리 기능을 지원한다.
10.다른 프레임워크나 라이브러리와 병행이 가능하며 이미 완료된 프로젝트에도 적절히 사용할 수 있는 확장성이 있다.

단점

1.리랜더 속도는 빠르나 화면전체를 그려주는 속도는 느리다
2.결합도가 높아진다. 재사용도가 조금 어려워질 수 있다
3.라이브러리 의존도가 높아짐
4.IE8 이하 버전은 지원하지 않는다.
5.웹의 궁극적 지향점과는 조금은 동떨어짐


프레임워크??
1.프레임워크는 개발을 위한 기본 구조와 규칠을 제공하는 도구이다
  개발자는 프레임워크가 제공하는 규칙와 인터페이스에 따라 코드를 작성한다
2.프레임워크는 애플리케이션의 흐름과 제어를 관리하며 필요한 기능과 도구를 제공한다
3.제어에 주체는 프레임워크이며 개발자가 어떻게 해야하는지에 대한 지침을 제공한다

라이브러리?
1.개발을 위해 재사용 가능한 코드의 집합이며 특정 기능을 수행하는 함수,클래스,모듈 등으로 구성된다
2.개발자가 필요한 기능을 호출하여 사용할 수 있다
3.프레임워크와 달리 개발자가 코드의 흐름과 제어를 직접 관리함
4.제어에 주체는 개발자이며 제어권을 개발자에게 줌

프레임워크와 라이브러리는 개발을 도와주는 도구이며 둘 다 개발자가 이미 작성된 코드를 활용하여 개발을 빠르고 효율적으로 진행하게 도와줌

선언적 방식 코드

EX)
function App(){------------------->함수(function)기반의 컴포넌트 
    return(------------------------>JSX 코드를 반환함
        <div>
        <h1>안녕 필우!</h1>
        <p>환영한다 필우야 지옥같은 리액트 월드에 온 것을 환영해!!</p>
        </div>
    );
}

EX)
const Myreact = (param1,param2) => {---------------->화살표 함수
    return (
        <div>
            안녕 필우!
        </div>
    );
};


리액트느 자바스크립트와XML을 조합한 JSX문법을 사용한다
JSX는 컴포넌트의 구조와 동작을 선언적으로 작성하게 해준다
선언적 프로그래밍은 무엇을 해야 하는지를 지정하는 방식을 의미한다.
이는 가독성을 높이고 컴포넌트의 렌터링을 보다 직관적으로 이해할 수 있게 도와준다.

JSX??
자바스크립트에서 XML을 추가해 엘리먼트를 생성하는 문법
JSX라는 문법을 만들어 사용자에게 UI가 실제로 어떻게 표현되는지를 보여줌
자바스크립트를 확장한 문법이며 공식적인 문법은 아니다.
가독성이 높고 이해하기가 쉬운 리액트만의 문법이다.
아래는 리액트에서 App.js 에 JSX로  "Hello! React"를 화면에 나타내는 코드입니다. 

EX)

function App() {
    const HelloReact = <h1>안녕 리액트!</h1>;------------>문법을 JSX라고한다.
    return(                                               반드시<div>또는 다른 컴포넌트 등의 부모 요소가 하나로 감싸야함
        <div>
            {HelloReact}
        </div>
  );
}
안녕 리액트! 가 XML코드처럼 <h1></h1> 태그에 감싸져 있는 것을 볼수있다
이렇게 XML태그로 감싸듯 HTML태그로 감싼 엘리먼트를 만드는 문법을 JSX라고한다.



컴포넌트(Component)??
리액트는 화면에서 UI(User Interface) 요소를 구분할 때 '컴포넌트'라는 단위를 사용한다. 
쉽게 말하면 리액트에서 앱을 이루는 가장 작은 조각이라고 할 수 있고, 레고 블록으로 집을 쌓게 된 경우 하나의 블록이 '컴포넌트'라고 할 수 있다. 
컴포넌트는 새로운 컴포넌트를 생성할 수 도 있고, MVC 의 뷰를 독립적으로 구성하여 재사용할 수 있습니다. 
리액트의 중요한 핵심인 '컴포넌트'에는 함수 컴포넌트, 클래스 컴포넌트 2가지가 있습니다. 

컴포넌트 구성 요소 

1.property(props) 

  부모 컴포넌트에서 자식 컴포넌트에 전달되는 데이터입니다. 프로퍼티값은 자식 컴포넌트에서 수정할 수 없다.

2.state

  컴포넌트의 상태를 저장하고 수정 가능한 데이터.

3.context 

 부모 컴포넌트에서 생성하여 모든 자식 컴포넌트에게 전달하는 데이터.



클래스(Class) 컴포넌트?? 

클래스 컴포넌트는 자바스크립트의 "클래스" 기반 컴포넌트로, class로 정의하고 render() 함수에서 jsx 코드를 반환합니다. 

1.class 키워드로 클래스 컴포넌트 생성
2.React.Component 상속

React의 ComponentClass를 상속받아  Component 상속이 필요요

3.render () 메서드 필수로 사용  

 클래스 컴포넌트 안에 render() 메서드가 꼭 필요하고 메서드 안에 JSX 를 리턴함

4.this 키워드 사용하기 

 state, props, refs,컴포넌트 메서드, 생명주기 메서드를 사용할 때 this 로 프로퍼티를 참조하여 사용한다.

 
클래스 컴포넌트 생성하기 

클래스 컴포넌트는 React의 ComponentClass를 상속받아 구현되기 때문에 반드시 {Component}를 import 하고 React.Component 를 상속받아야한다.

EX)
import React, { Component } from 'react';

EX)
class Myreact2 extends Component {
    render() {
        return (
            <div>
                안뇽 필우야!
            </div>
        );
    }
}
클래스형 컴포넌트 구조이다
Component를 상속받고 render() 매서드를 통해 return문 안에 있는 JSX코드를 반환한다.
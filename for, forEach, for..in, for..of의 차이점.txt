for

괄호로 감싸고 세미콜론으로 구분한 세 개의--->선택식과, 반복, 수행할 문(주로 블럭문) 으로 이루어져 있습니다-세개의 식은 필수가 아닌 선택사항이다.
요소와인덱스 모두 가지고 온다, 순서와배열이 보장되어있다, 인덱스값이 필요하다

for ([할당식 or 변수선언]; [매 반복마다 평가할 식]; [주로 변수를 증감하거나 바꿈])
   statement
   (조건이 참일떄 실행하는 문, 여러 문을 반복 실행하려면 {블럭문}으로 묶어야함, 아무것도 실행하지 않으려면 공백문 사용(;))

EX)
   for (let i = 0; i < 9; i++) {
  console.log(i);
  
}

식 두개만 사용 

let i = 0;
for (; i < 9; i++) {------------>공백(;)을 표현
  console.log(i);
  
}

for (let i = 0; ; i++) {----------->공백(;)을 표현
  console.log(i);
  if (i > 3) break;------->break문을 사용해서 무한 반복을 막아야함

}

for...in
정수가 아닌 이름을 가진 속성, 상속된 모든 열거 가능한 속성들을 반환합니다. 
반복되는 순서는 구현에 따라 다르기 때문에, 배열의 반복이 일관된 순서가 아닐수 있다(임의의 순서)
객체에 주로 사용된다
인덱스의 순서가 중요한 Array(베열)에서 반복을 위해 사용할 수 없습니다.---->배열은 정수로 이루어져 있기 때문이다
객체(object)의 반복을 위해 만들어졌지만, 배열의 반복을 위해서는 추천되지 않는다
객체의 속성을 확인(콘솔이나 다른 방법으로 출력)할 수 있기 때문에 실질적으로 디버깅을 위해 사용될 수 있습니다.
특정 값을 가진 키가 있는지 확인하려는 경우에 for...in을 사용할 수 있습니다.


객체의 key값에는 접근 가능하지만 value값에는 접근을 하지 못한다.

EX)
const Person = {
  name: 'Gil Dong',  // Key: name,     Value: '길동'
  age: 20,           // Key: age,      Value: 20
  gender: 'male'     // Key: gender,   Value: 'male'
};

Person이라는 객체(object)의 name 프로퍼티의 Key는 name이고 Value는 'Gil Dong'입니다.

객체의 키에 해당하는 값은 점(.)표기법 또는 대괄호([]) 표기법을 사용하여 가져올 수 있지만, 값에 해당하는 키를 가져오는 방법은 쉽지 않습니다.

값에 해당하는 키를 가져오려면, Object.keys() 메서드를 사용하여 객체의 모든 키를 배열로 가져온 다음 find() 메서드나 filter() 메서드를 사용해야 합니다.

EX)
const Person = {
  name: 'Hong Gil Dong',  // Key: name,   Value: '홍길동'
  age: 20,                // Key: age,    Value: 20
  gender: 'male'          // Key: gender, Value: 'male'
};
console.log(Object.keys(Person)); // ['name', 'age', 'gender']------>객체에서 키들을 배열로 나열함??

for...in 문법

EX)
for (const  variable  in  object) {
  ...
}

variable: 내가 원하는 이름으로 가능,변수라서 마음대로 변경 가능

object: 객체



      let book = {title: "자바스크립트 완벽하게 이해하기", price: 32000, author: "훈이", publisher: "자바스크립트짱짱",};
                  키        벨류                       키     벨류    키      벨류    키              벨류
		
      for (key in book) {
        
        //key를 받는 변수명은 임의변경 가능
        //in 객체명(object)
       
        console.log(key, book[key]);---->키값과 밸류를 같이 보고 싶으시다면 key와 밸류값에 접근하는 방법인 객체명[키값]을 입력하셔서 코딩하시면 됩니다.
      }



for....of
모든 요소만 순회
순서보장을 하지않는다
요소의 값만을 가지고온다
반복 가능한 객체(Array, Map, Set, String, TypedArray, arguments )에 대해서 사용할수있다
보통 배열에 사용된다

EX)
Array배열에 대한 반복

let A = [10, 20, 30];

for (let 가치 of A) {
  console.log(가치);
}

// 10
// 20
// 30

String에 대한 반복

let A = "boo";

for (let 가치 of A) {
  console.log(가치);
}
// "b"
// "o"
// "o"

TypedArray이란?

이 갹채는 직접 인스턴스화할 수 없다 대신 Int8Array 또는 8igInt64Array와 같은 특성 유형의 배열 인스턴스를 만들 수 있다.
모든 TypedArray 생성자는 new 로만 생성할 수 있습니다.

Map에 대해 반복

EX)

let iterable = new Map([
  ["a", 1],
  ["b", 2],
  ["c", 3],
]);

for (let entry of iterable) {
  console.log(entry);
}
// [a, 1]
// [b, 2]
// [c, 3]

for (let [key, value] of iterable) {
  console.log(value);
}
// 1
// 2
// 3

Map이란?

메서드는 배열 내의 모든 요소 각각에 대하여 주어진 함수를 호출한 결과를 모아 새로운 배열을 반환합니다.

배열을 순회하며(반목문을 돌린다,순서대로 반복) 각 요소에 대하여 인자로 주어진 콜백함수의 반환값(return)으로 새로운 배열을 생성

인덱스 값이 필요 함

EX)

arr.map(callback(element[, index[, array]])

callback-->요소의 값, 요소의 인덱스, map을 호풀한 원본 배열--->3개의 인수를 전달 받는다

EX)
재곱근을 구하여 새로운 배열을 만들기

let numbers = [1, 4, 9];

let A = numbers.map(Math.sqrt);

// A는 [1, 2, 3]

// numbers는 그대로 [1, 4, 9]

map을 활용해 배열 속 객체를 재구성하기

EX)

let Array = [
  { key: 1, value: 10 },
  { key: 2, value: 20 },
  { key: 3, value: 30 },
];

let pppArray = Array.map(function (obj) {
  let Obj2 = {};
  Obj2[obj.key] = obj.value;
  return Obj2;
});
// pppArray는 [{1:10}, {2:20}, {3:30}]

// Array는 그대로
// [{key:1, value:10},
//  {key:2, value:20},
//  {key:3, value: 30}]

인자를 받는 함수를 사용하요 숫자 배열 재구성하기

EX)

let numbers = [1, 4, 9];
let doubles = numbers.map(function (num) {
  return num * 2;
});
// doubles는 이제 [2, 8, 18]
// numbers는 그대로 [1, 4, 9]

set에 대해 반복
EX)

let iterable = new Set([1, 1, 2, 2, 3, 3]);

for (let value of iterable) {
  console.log(value);
}
// 1
// 2
// 3

for...of 와 for...in의 차이

for...in
객체의 모든 열거 가능한 속성에 대해서 임의로 반복함

for...of
[Symbol.iterator] 속성이 있는 모든 컬렉션 요소에 대해 이 방식으로 반복합니다.
iterable 객체가 반복하도록 정의한 값을 반복함

EX)

Object.prototype.objCustom = function() {};  --->모든 객채는 objCustom 프로퍼티를 상속받고, Array인 모든 객체는 arrCustom 프로퍼티를 상속받음
Array.prototype.arrCustom = function() {};   ---->iterable객체는 상속과 프로토타입 체인의 영향으로 objCustom 과 arrCustom 프로퍼티 둘 다 상속받음

const iterable = [3, 5, 7];
iterable.foo = 'hello';
----------------------------------------------------------------------------------------------------------------

for (const i in iterable) {
  console.log(i); // 0, 1, 2, "foo", "arrCustom", "objCustom"
}

for in 문은 임의의 순서로 iterable 객체의 열거 가능한 프로퍼티만 log로 출력한다
Array 요소인 3,5,7 이나 hello를 log로 출력하지 앟는다.
for in 문은 Array의 index와foo,arrCustom,objCustom을 출력한다---->3,5,7 이나 hello는 프로퍼티가 아니라 값이기 떄문에 열거 가능한 프로퍼티가 아니다

--------------------------------------------------------------------------------------------------------------
for (const i in iterable) {
  if (iterable.hasOwnProperty(i)) {
    console.log(i); // 0, 1, 2, "foo"
  }
}
for in 문은 그 위의 for in문과 비슷하다. 하지만 hasOwnProperty 메서드로 열거 가능한 프로퍼티가 객체 자신의 프로퍼티인지 체크할 수 있다. 
프로퍼티 0, 1, 2 및 foo는 고유 속성(상속 X)이므로 콘솔에 출력된다. 프로퍼티 rrCustom 및 objCustom은 상속되기 때문에 출력되지 않는다.

--------------------------------------------------------------------------------------------------------------------------------
for (const i of iterable) {
  console.log(i); // 3, 5, 7
}

for of는 iterable객체가 iterable이 반복하도록 정릐한 값을 반복하고 콘솔에 출력함
for of 문에서는 Array의 요소인 3,5,7이 출력된 것을 볼 수 있다.
객체 프로퍼티는 출력되지 않는다.


forEach()메소드

모든 요소의 순회,순서배열 과 순서보장 , 요소와인텍스(인텍스값필요)를 모두 가지고 옴

배열을 가지고 있는 힘수(메소드)라고 생각하면 된다

function (value, index, array){

}

const numbers = [1,2,3,4,5]

numbers.forEach(fuction (value, index, array)){

// 매개변수로 value, index, array를 갖는 콜백 함수를 사용

console.log(`${index}번쨰 요소 : ${value}`)

}

<!-- [실행 결과]
0번째 요소: 273
1번째 요소: 52
2번째 요소: 103
3번째 요소: 32
4번째 요소: 57 -->


map()메소드

배열을 순회(순서대로 반복)함
각 요소에 대한 인자로 주어진 콜백함수의 반환값(return)으로 새로운 배열을 생성
배열읠 가지고 있는 함수

<script>
    //배열을 선언합니다.
    let numbers = [273, 52, 103, 32, 57]

    //배열의 모든 값을 제곱합니다.
    numbers = numbers.map(function (value, index, array) { //매개변수로 value, index, array를 갖는 콜백 함수를 사용합니다.
        return value * value
        //value * value 하고 있으므로 모든 배열의 요소를 제곱한 새로운 배열을 만든다
    })

    //출력합니다.
    numbers.forEach(console.log) //매개변수로 console.log 메소드 자체를 넘겼습니다.
</script>


<!-- [실행 결과]
74529 0 Array(5)
2704 1 Array(5)
10609 2 Array(5)
1024 3 Array(5)
3249 4 Array(5) -->